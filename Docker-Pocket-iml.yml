
---------------------HELP---------------------
sintaxe: docker pull <comando>
docker pull help

---------------------IMAGES---------------------
docker ps -a
docker images   (images É DIFERENTE de container)

---------------------INFO---------------------
docker info

---------------------SEARCH---------------------
docker search java

---------------------SPRING BOOT---------------------
1 crate file on root: "Dockerfile"
FROM openjdk:8
ADD target/docker-spring-boot.jar docker-spring-boot.jar
EXPOSE 8085
ENTRYPOINT ["java","-jar","docker-spring-boot.jar"]

2 em application.properties
server.port=8085

3 docker build -f Dockerfile -t docker-spring-boot

4 docker images

5 docker run -p 8085:8085 docker-spring-boot

---------------------SPRING BOOT AND MYSQL---------------------
1 docker pull mysql

2 docker run --name mysql-local -e MYSQL_ROOT_PASSWORD=123 -e MYSQL_DATABASE=test -e MYSQL_USER=thiago -e MYSQL_PASSWORD=123 -d mysql:5.7

2.0 docker run -d 5195076672a7 (run an image id)
2.1 docker exec -it mysql-local bash
2.2 mysql -u root -p

3 docker container ls

4 "application.properties":
spring.datasource.url = jdbc:mysql://mysql-local:3306/test
spring.datasource.username = thiago
spring.datasource.password = 123

5 pom.xml
...
<build>
	<plugins>
		<plugin>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-maven-plugin</artifactId>
			<configuration>
				<finalName>spring-boot-mysql</finalName>
			</configuration>
		</plugin>
	</plugins>
</build>

6 crate file on root: "Dockerfile"
FROM openjdk:8
ADD target/spring-boot-mysql.jar spring-boot-mysql.jar
EXPOSE 8086
ENTRYPOINT ["java","-jar","spring-boot-mysql.jar"]

7 root do projeto:
docker build . -t spring-boot-mysql

8 docker images

9 docker run -p 8086:8086 --name spring-boot-mysql --link mysql-local:mysql -d spring-boot-mysql

10 docker container ls

11 docker logs mysql-local

12 docker logs spring-boot-mysql

13 após alguma alteração no Java:
docker stop sping-boot-mysql
docker image rm spring-boot-mysql (caso dê erro, será fornecida a instância do container a ser removido)
docker container rm <código image id>
docker build . -t spring-boot-mysql
docker run -p 8086:8086 --name spring-boot-mysql --link mysql-local:mysql -d spring-boot-mysql